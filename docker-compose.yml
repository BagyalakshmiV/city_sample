version: '3.8'

services:
  # PostgreSQL Database (if needed)
  database:
    image: postgres:15-alpine
    container_name: sqlbot-db
    environment:
      POSTGRES_DB: sqlbot
      POSTGRES_USER: sqlbot
      POSTGRES_PASSWORD: sqlbot_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sqlbot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sqlbot-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sqlbot-backend
    environment:
      - DATABASE_URL=postgresql://sqlbot:sqlbot_password@database:5432/sqlbot
      - CORS_ORIGINS=http://localhost:3000,http://frontend
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_cache:/app/.cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sqlbot-network
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sqlbot-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    networks:
      - sqlbot-network
    restart: unless-stopped

  # Redis (for caching, if needed)
  redis:
    image: redis:7-alpine
    container_name: sqlbot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sqlbot-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  backend_cache:

networks:
  sqlbot-network:
    driver: bridge